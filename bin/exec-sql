const pg = require('pg');
const fs = require('fs/promises');
const path = require('path');
const dotenv = require('dotenv');

dotenv.config();

const args = process.argv.slice(2);

async function main () {
    const command = args.shift();
    switch (command) {
        case 'replace-functions':
            return replaceDatabaseFunctions();

        case 'create-database':
            return createDatabase();

        case 'drop-database':
            return dropDatabase();
    
        default:
            return;
    }
}

async function replaceDatabaseFunctions () {
    const client = new pg.Client();
    await client.connect();

    const dirPath = './database/functions';
    const sqlFiles = await fs.readdir(dirPath);
    for (let file of sqlFiles) {
        const sql = await fs.readFile(path.join(dirPath, file));
        await client.query(sql.toString());
    }

    await client.end();
}

async function createDatabase () {
    const databaseName = process.env.PGDATABASE;

    const client = new pg.Client({database: 'postgres'});
    await client.connect();

    const {rows: [result]} = await client.query(`SELECT 1 AS "isCreated" FROM pg_database WHERE datname = '${databaseName}'`);
    if (result && result.isCreated) {
        return client.end();
    }

    await client.query(`CREATE DATABASE ${databaseName} TEMPLATE template0`);

    return client.end();
}

async function dropDatabase () {
    const databaseName = process.env.PGDATABASE;

    const client = new pg.Client({database: 'postgres'});
    await client.connect();

    await client.query(`DROP DATABASE IF EXISTS ${databaseName}`);

    return client.end();
}

main();
